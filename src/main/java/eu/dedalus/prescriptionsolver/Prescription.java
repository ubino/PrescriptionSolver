package eu.dedalus.prescriptionsolver;
import java.lang.String;
import eu.dedalus.prescriptionmodel.Exemption;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class Prescription implements java.io.Serializable, Cloneable {

	static final long serialVersionUID = 1L;

	@org.kie.api.definition.type.Label("esenzione applicata alla ricetta")
	private Exemption exemption = null;
	@org.kie.api.definition.type.Label("Livello di Urgenza (U,B,D,P)")
	private String urgency = null;
	@org.kie.api.definition.type.Label("massimo numero di righe (default 2)")
	private int maxRow = 2;
	@org.kie.api.definition.type.Label("massimo numero di confezioni per ricetta (default 2)")
	private int maxPieces = 2;

	@org.kie.api.definition.type.Label("tipo della ricetta (R,D,B)")
	private String outType;

	@org.kie.api.definition.type.Label("tipo di elemento (F,A etc..)")
	private String itemType;

	@org.kie.api.definition.type.Label(value = "identifier for the prescription")
	private int id;
	
	@org.kie.api.definition.type.Label("ricetta di farmaci multiprescrivibili")
	private boolean multiPrescription = false;

	public Prescription() {
	}

	public Exemption getExemption() {
		return this.exemption;
	}

	public void setExemption(Exemption exemption) {
		this.exemption = exemption;
	}

	public String getUrgency() {
		return this.urgency;
	}

	public void setUrgency(String urgency) {
		this.urgency = urgency;
	}

	public int getMaxRow() {
		return this.maxRow;
	}

	public void setMaxRow(int maxRow) {
		this.maxRow = maxRow;
	}

	public int getMaxPieces() {
		return this.maxPieces;
	}

	public void setMaxPieces(int maxPieces) {
		this.maxPieces = maxPieces;
	}

	public void initialize(String outType, String itemType,
			Exemption exemption, String urgency, boolean multiPrescription) {
		this.outType = outType;
		this.exemption = exemption;
		this.urgency = urgency;
		this.itemType = itemType;
		this.multiPrescription = multiPrescription;
		initialize();
	}

	public void initialize() {
		if (!"B".equals(outType)) {
			if (exemption != null && "PAT".equals(exemption.getType())) {
				this.maxPieces = 3;
			}
		} else {
			this.maxRow = Integer.MAX_VALUE;
			this.maxPieces = Integer.MAX_VALUE;
		}
	}

	public java.lang.String getOutType() {
		return this.outType;
	}

	public void setOutType(java.lang.String outType) {
		this.outType = outType;
	}

	public String getItemType() {
		return this.itemType;
	}

	public void setItemType(String itemType) {
		this.itemType = itemType;
	}

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	
	public boolean isMultiPrescription() {
		return this.multiPrescription;
	}

	public void setMultiPrescription(boolean multiPrescription) {
		this.multiPrescription = multiPrescription;
	}

	public Prescription(Exemption exemption,
			java.lang.String urgency, int maxRow, int maxPieces,
			java.lang.String outType, java.lang.String itemType, int id, boolean multiPrescription) {
		this.exemption = exemption;
		this.urgency = urgency;
		this.maxRow = maxRow;
		this.maxPieces = maxPieces;
		this.outType = outType;
		this.itemType = itemType;
		this.id = id;
		this.multiPrescription = multiPrescription;
	}
	
	@Override
	public Prescription clone() throws CloneNotSupportedException {
		// Define a shallow copy for Prescription element
		return  (Prescription)super.clone();
	} 
}