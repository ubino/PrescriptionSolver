package eu.dedalus.prescriptionsolver;

import eu.dedalus.prescriptionsolver.Prescription;
import eu.dedalus.prescriptionmodel.CommonDataInterface;

import eu.dedalus.prescriptionmodel.Exemption;
import eu.dedalus.prescriptionmodel.Notification;
import eu.dedalus.prescriptionmodel.Diagnosis;

import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;


/**
 * This class was automatically generated by the data modeler tool.
 */

@org.optaplanner.core.api.domain.entity.PlanningEntity
public abstract class PrescriptionEntity implements java.io.Serializable, CommonDataInterface {

    static final long serialVersionUID = 1L;
    
    @org.kie.api.definition.type.Label(value = "il riferimento alla ricetta")
	@org.optaplanner.core.api.domain.variable.PlanningVariable(valueRangeProviderRefs = {"prescriptionReference"})
	private Prescription prescription;
	
	protected abstract CommonDataInterface getConnonData();

    public PrescriptionEntity() {
    }

    public Prescription getPrescription() {
		return this.prescription;
	}

	public void setPrescription(Prescription prescription) {
		this.prescription = prescription;
	}

    public PrescriptionEntity(Prescription prescription){
        	this.prescription = prescription;
    }
    
    // Access to common data
    public String getId() {
		return this.getConnonData().getId();
	}

	public void setId(String id) {
		this.getConnonData().setId(id);
	}

	public String getType() {
		return this.getConnonData().getType();
	}

	public void setType(String type) {
		this.getConnonData().setType(type);
	}

	public String getInductor() {
		return this.getConnonData().getInductor();
	}

	public void setInductor(String inductor) {
		this.getConnonData().setInductor(inductor);
	}

	public boolean isDemat() {
		return this.getConnonData().isDemat();
	}

	public void setDemat(boolean demat) {
		this.getConnonData().setDemat(demat);
	}

	public List<Exemption> getAvailableExemptions() {
		return this.getConnonData().getAvailableExemptions();
	}

	public void setAvailableExemptions(List<Exemption> availableExemptions) {
		this.getConnonData().setAvailableExemptions(availableExemptions);
	}

	public Exemption getExemption() {
		return this.getConnonData().getExemption();
	}

	public void setExemption(Exemption exemption) {
		this.getConnonData().setExemption(exemption);
	}

	public Map<String, Boolean> getCheckFlags() {
		return this.getConnonData().getCheckFlags();
	}

	public void setCheckFlags(Map<String, Boolean> checkFlags) {
		this.getConnonData().setCheckFlags(checkFlags);
	}
	
	public void addCheckFlags(String key , Boolean value) {
		this.getConnonData().addCheckFlags(key, value);
	}

	public List<Notification> getErrors() {
		return this.getConnonData().getErrors();
	}

	public void setErrors(List<Notification> errors) {
		this.getConnonData().setErrors(errors);
	}

	public List<Notification> getWarnings() {
		return this.getConnonData().getWarnings();
	}

	public void setWarnings(List<Notification> warnings) {
		this.getConnonData().setWarnings(warnings);
	}

	public void addAvailableExemptions(String code, String type) {
		this.getConnonData().addAvailableExemptions(code, type);
	}

	public boolean isGranted() {
		return this.getConnonData().isGranted();
	}

	public void setGranted(boolean granted) {
		this.getConnonData().setGranted(granted);
	}

	public List<Notification> getInformations() {
		return this.getConnonData().getInformations();
	}

	public void setInformations(List<Notification> informations) {
		this.getConnonData().setInformations(informations);
	}

	public String getOverTheCounterReason() {
		return this.getConnonData().getOverTheCounterReason();
	}

	public void setOverTheCounterReason(String overTheCounterReason) {
		this.getConnonData().setOverTheCounterReason(overTheCounterReason);
	}

	public List<Diagnosis> getDiagnosis() {
		return this.getConnonData().getDiagnosis();
	}

	public void setDiagnosis(List<Diagnosis> diagnosis) {
		this.getConnonData().setDiagnosis(diagnosis);
	}
}